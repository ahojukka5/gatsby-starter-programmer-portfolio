{"componentChunkName":"component---src-templates-post-js","path":"/posts/2020-12-20-prismjs-formatting/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"author\": \"John Doe\",\n  \"title\": \"Using prism-react-renderer to format code blocks\",\n  \"date\": \"2020-12-20T00:00:00.000Z\",\n  \"published\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This post is about testing PrismJS code formatting with various programming\\nlanguages.\"), mdx(\"p\", null, \"Using code formatting follows markdown specification, i.e. triple backticks and\\noptionally programming language given. Optionally, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lineNumbers\"), \" can be given in\\nthe first line after programming language, to turn on line numbering.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markdown\"\n  }), \"```python lineNumbers\\nprint(\\\"Hello, world!\\\")\\n```\\n\")), mdx(\"p\", null, \"The markdown above is rendered as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers\",\n    \"lineNumbers\": true\n  }), \"print(\\\"Hello, world!\\\")\\n\")), mdx(\"h2\", null, \"Python\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers\",\n    \"lineNumbers\": true\n  }), \"import datetime\\n\\nprint(\\\"Now is \\\", datetime.datetime.now())\\n\\ndef hello(name: str, count: int) -> int:\\n    for i in range(count):\\n        print(f\\\"Hello, {name}\\\")\\n        if i > 3:\\n            break\\n    return len(name)\\n\")), mdx(\"h2\", null, \"JavaScript\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Hello = () => {\\n  const str = 'Hello, world!';\\n  return <div>{str}</div>;\\n};\\n\\n<Hello />;\\n\\n(function someDemo() {\\n  var test = 'Hello World!';\\n  console.log(test);\\n})();\\n\\nreturn () => <App />;\\n\")), mdx(\"h2\", null, \"Julia\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-julia\"\n  }), \"function hello()\\n    println(\\\"Hello, world\\\")\\nend\\n\")), mdx(\"h2\", null, \"Bash\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"echo \\\"Hello, world!\\\"\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Using prism-react-renderer to format code blocks","author":"John Doe","date":"2020 December 20th"}}},"pageContext":{"slug":"/posts/2020-12-20-prismjs-formatting/"}},"staticQueryHashes":["1467072586","63159454"]}